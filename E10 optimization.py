# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yvs-BmWqUoaVsiSrQoS9tG9EeVFs8CtZ
"""

import heapq

class Node:
    def __init__(self, level, profit, bound, weight, items):
        self.level = level
        self.profit = profit
        self.bound = bound
        self.weight = weight
        self.items = items

    def __lt__(self, other):
        return self.bound > other.bound

def calculate_bound(node, n, max_days, revenues, days):
    if node.weight >= max_days:
        return 0

    profit_bound = node.profit
    j = node.level + 1
    total_weight = node.weight

    while j < n and total_weight + days[j] <= max_days:
        total_weight += days[j]
        profit_bound += revenues[j]
        j += 1

    if j < n:
        profit_bound += (max_days - total_weight) * revenues[j] / days[j]

    return profit_bound

def branch_and_bound_knapsack(revenues, days, max_days):
    n = len(revenues)
    items = list(range(n))
    items = sorted(items, key=lambda i: revenues[i] / days[i], reverse=True)
    revenues = [revenues[i] for i in items]
    days = [days[i] for i in items]

    pq = []
    v = Node(-1, 0, 0, 0, [])
    v.bound = calculate_bound(v, n, max_days, revenues, days)
    heapq.heappush(pq, v)

    max_profit = 0
    best_items = []

    while pq:
        v = heapq.heappop(pq)

        if v.bound > max_profit:
            u = Node(0, 0, 0, 0, [])
            u.level = v.level + 1

            u.weight = v.weight + days[u.level]
            u.profit = v.profit + revenues[u.level]
            u.items = v.items + [items[u.level]]

            if u.weight <= max_days and u.profit > max_profit:
                max_profit = u.profit
                best_items = u.items

            u.bound = calculate_bound(u, n, max_days, revenues, days)

            if u.bound > max_profit:
                heapq.heappush(pq, u)

            u = Node(0, 0, 0, 0, [])
            u.level = v.level + 1
            u.weight = v.weight
            u.profit = v.profit
            u.items = v.items
            u.bound = calculate_bound(u, n, max_days, revenues, days)

            if u.bound > max_profit:
                heapq.heappush(pq, u)

    return max_profit, best_items

revenues = [15, 20, 5, 25, 22, 17]
days = [51, 60, 35, 60, 53, 10]
max_days = 150

max_profit, selected_projects = branch_and_bound_knapsack(revenues, days, max_days)
print("Maximum Revenue:", max_profit)
print("Selected Projects:", [p + 1 for p in selected_projects])